void char2binary(char c, char *dest)
{
    int	i = 0;

	while (i < 8)
	{
		unsigned char d = 0x1 & c >> i;
		if (d == 0)
			dest[i] = '0';
		else
			dest[i] = '1';
		i++;
	}
}

void encode(char *msg, char **dest)
{
    char *p = *dest;
    while (*msg)
    {
        char2binary(*msg, &p);
        p+=8;
        msg++;
    }
}

int send_bit(int set_pid, char **set_encoded)
{
    static char *buf;
    static int  pid;
    int     signum;

    signum = SIGUSR1;

    if (set_encoded != null)
        buf = *set_encoded;
    if (set_pid != null)
        pid = set_pid;
    if (*buf)
    {
        if (*buf == '1')
            signum = SIGUSR2;
        int ret = kill(pid, signum);
        if (ret == -1)
        {
            perror("error");
            exit(0);
        }
		buf++;
        return (0);
    }
    else
        return(1);
}

void handling_function(int signum, siginfo_t *info, ucontext_t *context)
{
    int end;

	if (signum == SIGUSR1)
    {
        printf("ack received");
        end = send_bit(null, null);
        if (end == 1)
        {
            printf("message sent");
            exit(0);
        }
    }
}

main
{
    char *msg
    int pid

	struct sigaction sa_1;
	sa_1.sa_handler = &handling_function;
	sa_1.sa_flags = SA_RESTART;
	sigaction(SIGUSR1, &sa_1, NULL);

    pid = atoi *va[1];
    int encoded_len = strlen(msg) * 8;
    char *encoded = malloc(sizeof char * encoded_len);
    encode(msg, &encoded);
    send_bit(pid, &encoded);
}